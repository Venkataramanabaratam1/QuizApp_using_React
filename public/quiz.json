[
    {
        "id": "01",
        "question": "What is the purpose of the `ReactDOM.render()` method?",
        "options": [
            "It renders a component to the browser DOM.",
            "It updates the state of a component.",
            "It creates a new component.",
            "It defines the virtual DOM."
        ],
        "answer": "It renders a component to the browser DOM."
    },
    {
        "id": "02",
        "question": "What is a higher-order component (HOC) in React?",
        "options": [
            "A function that takes a component and returns a new component.",
            "A component that wraps other components.",
            "A component that renders multiple other components.",
            "A component that handles API calls."
        ],
        "answer": "A function that takes a component and returns a new component."
    },
    {
        "id": "03",
        "question": "Which of the following best describes a React component?",
        "options": [
            "A function that returns HTML elements.",
            "A JavaScript object that holds the application's state.",
            "A reusable block of code that can return a UI.",
            "A DOM element that can be modified."
        ],
        "answer": "A reusable block of code that can return a UI."
    },
    {
        "id": "04",
        "question": "How do you pass data from a parent component to a child component in React?",
        "options": [
            "Using props.",
            "Using state.",
            "Using context.",
            "Using Redux."
        ],
        "answer": "Using props."
    },
    {
        "id": "05",
        "question": "In React, which method is used to trigger a re-render of a component when its state changes?",
        "options": [
            "render()",
            "setState()",
            "forceUpdate()",
            "updateComponent()"
        ],
        "answer": "setState()"
    },
    {
        "id": "06",
        "question": "Which hook is used to manage side effects in functional components?",
        "options": [
            "useState",
            "useEffect",
            "useRef",
            "useReducer"
        ],
        "answer": "useEffect"
    },
    {
        "id": "07",
        "question": "Which of the following is true about the `useState()` hook in React?",
        "options": [
            "It allows you to store and update a component's state.",
            "It is used to create class components.",
            "It is used to manage the virtual DOM.",
            "It is a part of the class component lifecycle."
        ],
        "answer": "It allows you to store and update a component's state."
    },
    {
        "id": "08",
        "question": "What is the purpose of `React.Fragment`?",
        "options": [
            "To create a wrapper for components without adding extra nodes to the DOM.",
            "To manage state in a class component.",
            "To handle events in functional components.",
            "To import external libraries."
        ],
        "answer": "To create a wrapper for components without adding extra nodes to the DOM."
    },
    {
        "id": "09",
        "question": "What does the `useEffect()` hook do in React?",
        "options": [
            "It is used to perform side effects in functional components.",
            "It is used to update the state of a component.",
            "It is used to pass props to child components.",
            "It is used to create an event handler."
        ],
        "answer": "It is used to perform side effects in functional components."
    },
    {
        "id": "10",
        "question": "What is the main difference between functional components and class components in React?",
        "options": [
            "Functional components do not have lifecycle methods, while class components do.",
            "Functional components are used for UI only, while class components are for logic.",
            "Class components cannot use hooks, while functional components can.",
            "Functional components require more boilerplate code than class components."
        ],
        "answer": "Functional components do not have lifecycle methods, while class components do."
    }
]
